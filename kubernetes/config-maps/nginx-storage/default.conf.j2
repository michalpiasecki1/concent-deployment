resolver kube-dns.kube-system.svc.cluster.local;

map $http_accept $extension {
    default html;
    application/json json;
}

{% if not nginx_storage_allow_http %}
# HTTP -> HTTPS redirect
server {
    listen 80      default_server;
    listen [::]:80 default_server;
    server_name    {{ storage_cluster_address }};
    return 302     https://$server_name$request_uri;

}
{% endif %}

server {
    {% if nginx_storage_allow_http %}
    # HTTP
    listen 80       default_server;
    {% endif %}
    # HTTPS
    listen 443      ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    ssl_certificate     /etc/ssl/secrets/nginx-storage-ssl.crt;
    ssl_certificate_key /etc/ssl/secrets/nginx-storage-ssl.key;

    # Add Diffie-Helman group
    ssl_dhparam /etc/ssl/secrets/nginx-storage-dhparam.pem;

    gzip                     on;
    gzip_min_length          1000;
    gzip_proxied             expired no-cache no-store private auth;
    gzip_types               text/plain text/css text/javascript application/xml;
    client_max_body_size     {{ max_upload_size }};

    # NOTE: OpenResty uses /usr/local/openresty/nginx/, not /etc/nginx/ as the default config location.
    # We have to use absolute path to include files from /etc/nginx/.
    include                  /etc/nginx/snippets/error-pages.conf;

    set $gatekeeper_api_backend http://gatekeeper.default.svc.cluster.local;

    location /download/ {
        limit_except        GET { deny all; }
        auth_request        /download-auth/;
        if ($request_uri ~ "/download/(.*)") {
            set $download_url $1;
        }
        alias /srv/storage/;
    }

    location /download-auth/ {
        internal;
        proxy_pass                $gatekeeper_api_backend/gatekeeper/download-auth/$download_url;
        proxy_pass_request_body   off;
        proxy_set_header          Content-Length "";
    }

    location = /upload/ {
        auth_request /upload-auth/;
        auth_request_set $checksum $upstream_http_concent_file_checksum;
        auth_request_set $size     $upstream_http_concent_file_size;

        access_by_lua_block {
            -- Add headers from gatekeeper response
               ngx.req.set_header("Concent-Checksum", ngx.var.checksum)
               ngx.req.set_header("Concent-File-Size", ngx.var.size)

            -- Make sure that Concent-Upload-Path header with path and filename were included with the request.
            if ngx.req.get_headers()["Concent-Upload-Path"] == nil then
                ngx.status = 400
                ngx.header.content_type = "application/json; charset=utf-8"
                ngx.say('{"error_message": "Concent-Upload-Path header is missing.", "error_code": "missing-header"}')
                return ngx.exit(400)
            end

            -- Make sure that Concent-Checksum header was included with the request.
            if ngx.req.get_headers()["Concent-Checksum"] == nil then
                ngx.status = 502
                ngx.header.content_type = "application/json; charset=utf-8"
                ngx.say('{"error_message": "Concent-Checksum header is missing.", "error_code": "missing-header"}')
                return ngx.exit(502)
            end

            -- Make sure that Concent-File-Size header was included with the request.
            if ngx.req.get_headers()["Concent-File-Size"] == nil then
                ngx.status = 502
                ngx.header.content_type = "application/json; charset=utf-8"
                ngx.say('{"error_message": "Concent-File-Size header is missing.", "error_code": "missing-header"}')
                return ngx.exit(502)
            end

            -- Make sure that the request actually has a body.
            if ngx.req.get_headers()["Content-Length"] == "0" then
                ngx.status = 400
                ngx.header.content_type = "application/json; charset=utf-8"
                ngx.say('{"error_message": "The file to be uploaded must not be empty.", "error_code": "empty-file"}')
                return ngx.exit(400)
            end

            -- Strip the X-Session-Id header from the request if client has provided it.
            -- nginx-big-upload uses this header to set the name of the temporary file.
            -- If it's empty, a random name will be generated and that's exactly what we want.
            ngx.req.set_header("X-Session-Id", "")

            -- Strip the X-SHA1 header from the request if client has provided it.
            -- nginx-big-upload uses this header to compare hash provided by client to the hash of the uploaded file.
            -- In our case the hash is not supposed to be provided by the client so we disable this by removing the header even if the client sends it.
            -- We get it from gatekeeper and letting client set it would allow it to cheat.
            ngx.req.set_header("X-SHA1", "")
        }

        try_files $uri @upload-internal;
    }

    location /upload-auth/ {
          internal;
          proxy_method      POST;
          proxy_pass        $gatekeeper_api_backend/gatekeeper/upload-auth/$http_concent_upload_path;
          proxy_set_header  Concent-Upload-Path "";
          proxy_set_header  Content-Length "";
    }

    location @upload-internal {
        lua_code_cache   on;
        set $storage     backend_file;
        set $bu_checksum on;
        set $bu_sha1     on;

        set $file_storage_path /srv/storage;
        set $backend_url       /result/;
        set $package_path      '/opt/nginx-big-upload/lib/?.lua';
        content_by_lua_file    /opt/nginx-big-upload/lib/big-upload.lua;

    }

    location /result/ {
        internal;
        access_log off;

        content_by_lua_block {
            ngx.exec("@upload-result")
        }
    }

    location @upload-result {
        content_by_lua_block {
            local lfs   = require('lfs_ffi')
            local utils = require('pl.utils')
            local table_utils   = require('table_utils')

            nginx_big_upload_request_body   = ngx.req.get_body_data()
            tmp_file_name                   = string.match(nginx_big_upload_request_body, 'id=(.-)&')
            checksum_from_nginx_big_upload  = "sha1:" .. string.match(nginx_big_upload_request_body, 'sha1=(.-)&')
            file_size_from_nginx_big_upload = string.match(nginx_big_upload_request_body,'size=(.-)&')

            -- Now that the file has successfully finished uploading, we can check if the hashes of file are the same.
            -- Accept the hash from Concent-Checksum header. We assume that this header was validated by
            -- the gatekeeper app and is safe to use.
            checksum_from_gatekeeper = ngx.req.get_headers()["Concent-Checksum"]
            if checksum_from_nginx_big_upload ~= checksum_from_gatekeeper then
                ngx.status = 400
                ngx.header.content_type    = "application/json; charset=utf-8"
                -- Nginx big upload module adds headers with checksum and temporary file name to its response.
                -- We don't want to return them to the client.
                -- FIXME: Setting it to an empty string does not remove the headers. For now we set it to a
                -- single space to work around this but we should really just find a way to remove those headers.
                ngx.header["X-SHA1"]       = " "
                ngx.header["X-Session-Id"] = " "
                ngx.say('{"error_message": "File checksum does not match the token", "error_code": "checksum-mismatch"}')
                os.remove("/srv/storage/" .. tmp_file_name)
                os.remove("/srv/storage/" .. tmp_file_name .. ".shactx")
                return ngx.exit(400)
           end

           -- Check file size.
           -- Accept the size from Concent-File-Size header. We assume that this header was validated by
           -- the gatekeeper app and is safe to use.
           file_size_from_gatekeeper = ngx.req.get_headers()["Concent-File-Size"]
           if file_size_from_nginx_big_upload ~= file_size_from_gatekeeper then
                ngx.status = 400
                ngx.header.content_type    = "application/json; charset=utf-8"
                -- Nginx big upload module adds headers with checksum and temporary file name to its response.
                -- We don't want to return them to the client.
                -- FIXME: Setting it to an empty string does not remove the headers. For now we set it to a
                -- single space to work around this but we should really just find a way to remove those headers.
                ngx.header["X-SHA1"]       = " "
                ngx.header["X-Session-Id"] = " "
                ngx.say('{"error_message": "File size does not match the token", "error_code": "file-size-mismatch"}')
                os.remove("/srv/storage/" .. tmp_file_name)
                os.remove("/srv/storage/" .. tmp_file_name .. ".shactx")
                return ngx.exit(400)
           end

            -- Move the file to its final location.
            -- Accept the name from Concent-Upload-Path header. We assume that this header was validated by
            -- the gatekeeper app and is safe to use. In particular, the path must be relative.
            header_path_with_filename = ngx.req.get_headers()["Concent-Upload-Path"]
            path_parts                = utils.split('/srv/storage/' .. header_path_with_filename, '/')
            path                      = ""
            for index ,path_part in pairs(path_parts) do

                -- Create all intermediate directories on the path. Ignore the last part (which is the file name)
                local size = table_utils.length(path_parts) - 1
                if index <= size then
                    path = path .. path_part .. '/'
                    lfs.mkdir(path)
                end
            end

            os.rename("/srv/storage/" .. tmp_file_name, "/srv/storage/" .. header_path_with_filename)
            os.remove("/srv/storage/" .. tmp_file_name .. ".shactx")
            -- Nginx big upload module adds headers with checksum and temporary file name to its response.
            -- We don't want to return them to the client.
            -- FIXME: Setting it to an empty string does not remove the headers. For now we set it to a
            -- single space to work around this but we should really just find a way to remove those headers.
            ngx.header["X-SHA1"]       = " "
            ngx.header["X-Session-Id"] = " "
            ngx.header.content_type    = "application/json; charset=utf-8"
            ngx.say('{"message": "File was successfully uploaded"}')
        }
    }
}
